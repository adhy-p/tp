<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<main>
    <favourite>No</favourite>
    <subject>C</subject>
    <contents>
    Strings are actually one-dimensional array of characters terminated by a null character &amp;apos;\0&amp;apos;. Thus a null-terminated string contains the characters that comprise the string followed by a null.

    The following declaration and initialization create a string consisting of the word &amp;quot;Hello&amp;quot;. To hold the null character at the end of the array, the size of the character array containing the string is one more than the number of characters in the word &amp;quot;Hello.&amp;quot;

    char greeting[6] = {&amp;apos;H&amp;apos;, &amp;apos;e&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;\0&amp;apos;};
    If you follow the rule of array initialization then you can write the above statement as follows −

    char greeting[] = &amp;quot;Hello&amp;quot;;
    Following is the memory presentation of the above defined string in C/C++ −

    String Presentation in C/C++
    Actually, you do not place the null character at the end of a string constant. The C compiler automatically places the &amp;apos;\0&amp;apos; at the end of the string when it initializes the array. Let us try to print the above mentioned string −

    ```
    #include &amp;lt;stdio.h&amp;gt;

    int main () {

       char greeting[6] = {&amp;apos;H&amp;apos;, &amp;apos;e&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;\0&amp;apos;};
       printf(&amp;quot;Greeting message: %s\n&amp;quot;, greeting );
       return 0;
    }```
    When the above code is compiled and executed, it produces the following result −

    Greeting message: Hello
    C supports a wide range of functions that manipulate null-terminated strings −

    Sr.No.	Function &amp;amp; Purpose
    1   strcpy(s1, s2);
        Copies string s2 into string s1.

    2   strcat(s1, s2);
        Concatenates string s2 onto the end of string s1.

    3   strlen(s1);
        Returns the length of string s1.

    4   strcmp(s1, s2);
        Returns 0 if s1 and s2 are the same; less than 0 if s1&amp;lt;s2; greater than 0 if s1&amp;gt;s2.

    5   strchr(s1, ch);
        Returns a pointer to the first occurrence of character ch in string s1.

    6   strstr(s1, s2);
        Returns a pointer to the first occurrence of string s2 in string s1.

    The following example uses some of the above-mentioned functions −

    ```
    #include &amp;lt;stdio.h&amp;gt;
    #include &amp;lt;string.h&amp;gt;

    int main () {

       char str1[12] = &amp;quot;Hello&amp;quot;;
       char str2[12] = &amp;quot;World&amp;quot;;
       char str3[12];
       int  len ;

       /* copy str1 into str3 */
       strcpy(str3, str1);
       printf(&amp;quot;strcpy( str3, str1) :  %s\n&amp;quot;, str3 );

       /* concatenates str1 and str2 */
       strcat( str1, str2);
       printf(&amp;quot;strcat( str1, str2):   %s\n&amp;quot;, str1 );

       /* total lenghth of str1 after concatenation */
       len = strlen(str1);
       printf(&amp;quot;strlen(str1) :  %d\n&amp;quot;, len );

       return 0;
    }
    ```
    When the above code is compiled and executed, it produces the following result −
        strcpy( str3, str1) :  Hello
        strcat( str1, str2):   HelloWorld
        strlen(str1) :  10
    Adapted from https://www.tutorialspoint.com/cprogramming/c_strings.htm
    </contents>
</main>
